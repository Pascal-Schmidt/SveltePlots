---
title: "SveltePlot Details"
author: Pascal Schmidt
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{SveltePlot Details}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, message = FALSE, warning = FALSE, echo=FALSE}
knitr::opts_chunk$set(eval = T)
knitr::opts_chunk$set(
  message = F,
  warning = F,
  comment = "#>",
  fig.height = 6,
  fig.width = 7.5
)

library(dplyr)
library(SveltePlots)
```

# Line Charts and Time-Series

## Adding Multiple Series

We'll plot a line chart with the `gapminder` data. Note that we need to drop the levels when plotting individual countries. This is due to the fact that `SveltePlots` expects us to provide the number of colors equal to the number of levels in the column for the color mapping. So we can either drop the extra levels or coerce the column into a character vector.   

In the chart below, we added 3 additional series for the the countries Chile and Germany. We specify `group = country` for the legend to display the country name. 

```{r}
data("gapminder")

gapminder <- gapminder %>% 
  dplyr::mutate(
    country = as.character(country),
    year = lubridate::ymd(paste0(year, "-01-01"))
  )

sp <- SveltePlots::sp(
  data = gapminder %>% 
    dplyr::group_by(year, continent) %>% 
    dplyr::summarise(
      lifeExp = mean(lifeExp)
    ) %>% 
    dplyr::ungroup(),
  mapping = spaes(x = year, y = lifeExp, group = continent),
  type = "line",
  combine_same_groups = FALSE
) %>% 
  sp_add_series(
    data = gapminder %>% 
      dplyr::filter(country == "Germany"),
    mapping = spaes(x = year, y = lifeExp, group = country),
    type = "line", 
    colors = "gold"
  ) %>% 
  sp_add_series(
    gapminder %>% 
      dplyr::filter(country == "Chile"),
    mapping = spaes(x = year, y = lifeExp, group = country), 
    type = "line", 
    colors = "silver"
  ) %>% 
  sp_add_series(
    gapminder %>% 
      dplyr::filter(country == "Chile"),
    mapping = spaes(x = year, y = lifeExp, group = country),
    type = "points", 
    size = 3, 
    tooltip = FALSE
  ) 
```

We can add a title with `sp_title()`

```{r}
sp %>% 
 sp_title(
   title = "Life Expectancy Over Time",
   font_size = 26
 ) 
```

For the above graph we added a points series and a line series for Chile and both series show up in the legend because of `combine_same_groups = FALSE` in the `sp` function. We do not show the tooltip for the points series for Chile. 

## Legends and Hovering

By clicking the legend, we can add and remove series. Sometimes, it is nice to control multiple series that correspond to the same groups with one click. By default, `SveltePlots` uses only one legend to control all series for the same group. Different from the gapminder chart above where we had `combine_same_groups = FALSE`, in this chart we have `combine_same_groups = TRUE`, which is the default. This combines different line and points sseries into one legend entry. 

```{r}
data("purchases")
sp(
  data = purchases_age, 
  type = "line",
  mapping = spaes(x = adjusted_timestamp, y = revenue_roll, group = age),
  colors = c("red", "green", "blue"),
  combine_same_groups = TRUE
) %>%
  sp_add_series(
    data = purchases_age,
    mapping = spaes(x = adjusted_timestamp, y = revenue, group = age),
    type = "points", 
    alpha = 0.4
  ) %>% 
  sp_add_series(
    data = purchases_age[purchases_age$revenue == max(purchases_age$revenue), ], 
    mapping = spaes(x = adjusted_timestamp, y = revenue, group = age),
    type = "points",
    size = 5, 
    tooltip = F
  ) 
```

The line and points, which are two different series, are controlled by one legend entry.   

Similarly, we can also control each series we are plotting with the legend by specifying `combine_same_groups = FALSE`. Then we can add and remove each series individually. 

```{r}
sp <- sp(
  data = purchases_age, 
  mapping = spaes(x = adjusted_timestamp, y = revenue_roll, group = age),
  type = "line",
  colors = c("red", "green", "blue"),
  combine_same_groups = FALSE
) %>%
  sp_add_series(
    data = purchases_age, 
    mapping = spaes(x = adjusted_timestamp, y = revenue, group = age),
    type = "points",
    alpha = 0.4,
    tooltip = F, 
  ) %>% 
  sp_add_series(
    data = purchases_age[purchases_age$revenue == max(purchases_age$revenue), ], 
    mapping = spaes(x = adjusted_timestamp, y = revenue, group = age),
    type = "points", 
    size = 5,
    tooltip = F, 
    include_legend = F
  ) 

sp
```

We also removed the legend with `include_legend = F` for the last series. 

Below is another example with the mtcars data set where we would like to highlight points which have greater or equal to 28 miles per gallon. In this case we should choose `combine_same_groups = FALSE` to have control over both series with the two legend entries.

```{r}
data("mtcars")
sp <- sp(
  mtcars %>% dplyr::filter(mpg < 28), 
  mapping = spaes(x = mpg, y = wt),
  type = "points", 
  colors = "black",
  combine_same_groups = FALSE
) %>%
  sp_add_series(
    data = mtcars %>%
      dplyr::filter(mpg >= 28),
    mapping = spaes(x = mpg, y = wt), 
    type = "points", 
    size = 5,
    colors = "red"
  ) 

sp
```

## Line Breaks

We can combine lines when we are not having any `NA` values in the data set.  

```{r}
set.seed(123)
purchases_age_line_breaks <- purchases_age[sample(1:nrow(purchases_age), size = nrow(purchases_age)*0.7), ]

sp <- sp(
  data = purchases_age_line_breaks,
  mapping = spaes(x = adjusted_timestamp, y = revenue_roll, group = age),
  type = "line",
  colors = c("red", "green", "blue")
) %>% 
  sp_add_series(
    data = purchases_age_line_breaks, 
    mapping = spaes(x = adjusted_timestamp, y = revenue_roll, group = age),
    type = "points", 
    tooltip = F
  ) 
sp
```

Similarly, we can break lines when having NA values in the data set for the y-values. Notice, when there are no two consecutive dates, there will not be a line and therefore, we added a points series as well.

```{r}
purchases_age_line_breaks <- purchases_age
purchases_age_line_breaks$revenue_roll[sample(1:nrow(purchases_age), size = nrow(purchases_age)*0.2)] <- NA

sp <- sp(
  data = purchases_age_line_breaks,
  mapping = spaes(x = adjusted_timestamp, y = revenue_roll, group = age),
  type = "line",
  colors = c("red", "green", "blue")
) %>%   
  sp_add_series(
    data = purchases_age_line_breaks, 
    mapping = spaes(x = adjusted_timestamp, y = revenue_roll, group = age),
    type = "points",
    tooltip = F
  ) 

sp
```

## Confidence Intervals

We can specify confidence intervals or bands with the `y_min` and `y_max` arguments in the `spaes` function.

```{r}
data("confidence_intervals")

sp(
  data = confidence_intervals, 
  mapping = spaes(x = .index, y = .value, group = .key),
  type = "line",
  size = 2
) %>% 
  sp_add_series(
    data = confidence_intervals %>% 
      dplyr::mutate(.key = as.character(.key)) %>%
      na.omit(),
    mapping = spaes(x = .index, y_min = .conf_lo, y_max = .conf_hi, group = .key),
    type = "bands"
  ) 
```

## Walmart

The Walmart weekly sales data displays weekly revenue by department. We added points and lines series and a mix of manually added colors for department 1 and 3 and default colors for the other departments. We also rotated the x-axis and changed the labels for the y-axis to have aa dollar format. If you would like to explore the different formats which can be used you can check out the [documentation](https://d3js.org/d3-format).

```{r}
data("walmart_sales_weekly")
walmart_sales_weekly <- walmart_sales_weekly %>%
  dplyr::select(Dept, Date, Weekly_Sales) %>%
  dplyr::arrange(Date) %>%
  dplyr::as_tibble() %>%
  dplyr::mutate(
    Date = lubridate::ymd(Date)
  )

sp(
  data = walmart_sales_weekly %>%
    dplyr::filter(Dept %in% c(1, 3)),
  mapping = spaes(x = Date, y = Weekly_Sales, group = Dept),
  type = "line",
  colors = c("black", "grey")
) %>%
  sp_add_series(
    data = walmart_sales_weekly %>%
      dplyr::filter(Dept %in% c(38, 93, 95)),
    mapping = spaes(x = Date, y = Weekly_Sales, group = Dept),
    type = "line"
  ) %>% 
  sp_add_series(
    data = walmart_sales_weekly %>%
      dplyr::filter(Dept %in% c(8, 13)),
    mapping = spaes(x = Date, y = Weekly_Sales, group = Dept),
    type = "points"
  ) %>% 
  sp_x_axis(rotation_axis_ticks = -30) %>% 
  sp_y_axis(format = "$,.3r") 
```

## Facetting

When we want to create multiple charts based on a column or multiple columns in the data, we need to specify the faceting variable in the `sp()` function with the `facet_var` argument. It takes the name of a column as a character or a character vector of multiple columns which present in the data set. In the `sp_facet()` function, we can specify how many rows and column we want. By default, the scales are fixed and can be change to be free as well. The `sp_facet` function should always be the last funtion used in the chain.

```{r}
data("penguins")
sp <- sp(
  data = penguins,
  mapping = spaes(x = flipper_length_mm, y = bill_length_mm, group = species),
  type = "points",
  facet_var = "sex"
) %>% 
  SveltePlots::sp_facet(ncol = 2, scales = "free") 
sp
```

The levels or groups in the columns will be the facet titles of the charts. We can customize them with some custom css for the header. Again, make sure that the `sp_facet()` function is the last function in the chain. 

```{r fig.height=12}
custom_css_titles <- "background-color: grey; color: white;          
                      text-align: center; padding: 10px;         
                      border-radius: 5px;"

sp <- sp(
  data = penguins,
  mapping = spaes(x = flipper_length_mm, y = bill_length_mm),
  type = "points",
  facet_var = c("sex", "species"),
  include_legend = FALSE
) %>% 
  sp_x_axis(rotation_axis_ticks = -90) %>% 
  sp_title(custom_css = custom_css_titles) %>% 
  SveltePlots::sp_facet(scales = "fixed") 

sp
```

## Annotations

In `SveltePlots` we can put annotation in charts as segments, text, and arrows. 

```{r}
sp(
  data = purchases_age, type = "line",
  mapping = spaes(x = adjusted_timestamp, y = revenue_roll, group = age),
  colors = c("red", "green", "blue"),
  combine_same_groups = TRUE
) %>%
  sp_add_series(
    data = purchases_age, 
    mapping = spaes(x = adjusted_timestamp, y = revenue, group = age),
    type = "points", 
    alpha = 0.4,
    tooltip = F, 
    include_legend = F
  ) %>% 
    sp_add_series(
    data = purchases_age[purchases_age$revenue == max(purchases_age$revenue), ], 
    mapping = spaes(x = adjusted_timestamp, y = revenue, group = age),
    type = "points",
    size = 5, 
    tooltip = F
    ) %>% 
  sp_add_segments(
    x_start = "2023-08-31", x_end = "2023-09-05",
    y_start = "auto", y_end ="auto",
    type = "rect", 
    opacity = 0.2,
    background_color = "black",
    text_color = "white",
    show_legend = TRUE, 
    legend_text = "Labor Day Bundle",
    tooltip = "Revenue: <strong>235</strong>"
  ) %>% 
  sp_add_arrows(
    x_start = c("2023-10-01", "2023-08-01"), x_end = c("2023-09-05", "2023-08-31"),
    y_start = c(1200, 1200), y_end = c(1000, 1370),
    arrow_head = c(0, 0),
    size = c(200, 200), 
    curvature = c(0.2, 0.5), 
    direction = c("downward", "downward"), 
    color = c("black", "black"),
    arrow_head_type = c("triangle", "triangle")
  ) %>% 
  sp_add_text(
    x = c("2023-07-10", "2023-10-01"),
    y = c(1300, 1220),
    text = c(
      "This was the highest revenue day \n due to the labor day bundle",
      "Labor Day Bundle Run Window"
    )
  ) 
```

## Segments

In time-series charts sometimes 

```{r fig.height=6}
data("segments")
data("dau")

head(segments)
head(dau)

sp <- sp(
  data = dau, 
  type = "line",
  spaes(x = date, y = DAU), 
  tooltip = FALSE
) %>% 
  sp_add_series(
    data = dau,
    mapping = spaes(x = date, y = DAU, group = Slot),
    type = "points",
    size = 4,
    tooltip = TRUE,
  ) %>% 
  sp_add_segments(
    x_start = segments$start_date, 
    x_end = segments$end_date,
    y_start = "even",
    y_end = "even",
    type = "rect", 
    opacity = 0.2, 
    background_color = segments$colors,
    text_color = "white",
    show_legend = TRUE,
    legend_text = segments$event_type,
    tooltip = unlist(segments$extra_details),
    y_position = segments$y_end, 
    key = segments$key
  ) %>% 
  sp_title("DAU", font_size = 24) %>% 
  sp_x_axis(rotation_axis_ticks = -30) 

sp
```

## CO2 Data 

```{r}
data("CO2")
CO2 <- CO2 %>%
  dplyr::as_tibble() %>%
  dplyr::mutate(
    date = seq(
      as.Date("2023-01-01"),
      as.Date("2023-01-01") + lubridate::days(83), by = "day")
  )

sp(
  data = CO2, type = "line", 
  mapping = spaes(x = date, y = uptake, group = Type)
) %>%
  sp_add_series(
    data = CO2,
    mapping = spaes(x = date, y = conc, group = Type),
    type = "line", tooltip = F
  ) %>%
  sp_add_series(
    data = CO2, mapping = 
      spaes(x = date, y = conc, group = Type),
    type = "points"
  ) %>%
  sp_x_axis(format = "%b-%d") 
```

## Economics

```{r}
data("economics")

sp <- sp(
  data = economics, 
  mapping = spaes(x = date, y = unemploy),
  type = "line"
) %>%
  sp_add_series(
    data = economics, 
    mapping = spaes(x = date, y = pce), 
    type = "line",
    tooltip = F
  ) %>%
  sp_add_series(
    data = economics, 
    mapping = spaes(x = date, y = psavert), 
    type = "line",
    tooltip = T
  ) %>% 
  sp_x_axis(
    format = "%b %Y", 
    ticks = 4,
    label = "Date", 
    font_size_label = 14,
    font_size_ticks = 12,
    rotation_axis_ticks = -30
  ) %>% 
  sp_y_axis(
    font_size_label = 14,
    font_size_ticks = 12
  )
```

```{r}
sp(
  data = economics, 
  mapping = spaes(x = date, y = unemploy),
  type = "line",
  tooltip = T, 
  colors = "red"
) %>%
  sp_add_series(
    data = economics,
    mapping = spaes(x = date, y = pce), 
    type = "line",
    tooltip = T, 
    colors = "green"
  ) %>%
  sp_add_series(
    data = economics,
    mapping = spaes(x = date, y = psavert), 
    type = "line",
    tooltip = F, 
    colors = "blue"
  ) %>% 
  sp_x_axis(
    format = "%b %Y", 
    ticks = 4,
    label = "Date",
    font_size_label = 14,
    font_size_ticks = 12,
    rotation_axis_ticks = -30
  ) %>% 
  sp_y_axis(
    font_size_label = 14, 
    font_size_ticks = 12
  )
```

```{r}
data("quests")
library(SveltePlots)
sp <- sp(
  data = quests, 
  mapping = spaes(x = progression_2, y = retention, group = custom_01),
  type = "line", 
  tooltip = F
) %>%
  sp_add_series(
    data = quests, 
    mapping = spaes(x = progression_2, y = retention, group = custom_01),
    type = "points", 
    tooltip = T
  ) %>% 
  sp_x_axis(
    rotation_axis_ticks = 90,
    text_anchor = "middle",
    dy = 7,
    dx = 5
  ) %>% 
  sp_y_axis(format = '~%') %>% 
  sp_add_segments(
    x_start = "Quest 49", x_end = "Quest 12", 
    y_start = "auto", y_end ="auto",
    type = "rect", 
    opacity = 0.2, 
    background_color = "black", 
    text_color = "white",
    show_legend = TRUE, 
    legend_text = "Quest 49 - Quest 12",
    tooltip = "Quest 49 - Quest 12"
  ) 
```

```{r}
# Generate hourly time series data for 7 days
set.seed(123)
start_time <- as.POSIXct("2022-01-01 00:00:00")
end_time <- start_time + 1 * 24 * 3600  # 7 days in seconds
timestamps <- seq(start_time, end_time, by = "hour")
values <- rnorm(length(timestamps))  # Random values for demonstration purposes

# Create a tibble
hourly_tibble <- tibble(
  timestamp = timestamps,
  value = values
)

sp(
  data = hourly_tibble, 
  mapping = spaes(x = timestamp, y = value),
  type = "line", 
  include_legend = FALSE
) %>%  
  sp_x_axis(
    label = "Date",
    rotation_axis_ticks = 90,
    text_anchor = "end"
  )
```

## Custom Tooltip

The custom tooltip works if we have a list column of tibbles named `custom_tooltip`. The chart will recognize the name and will use this column to create custom tooltips instead of using the y variable, retention in this case, for the tooltip. The column names for the individual tibbles will be displayed as the keys with the corresponding values. 

```{r}
data("quests")
quests <- quests %>% 
  dplyr::rowwise() %>%
  dplyr::mutate(
    custom_tooltip = dplyr::tibble(
      Installs = n.y,
      `Quest Start` = n.x,
      Retention = as.character(round(retention, 4)*100)
    ) %>% list()
  ) %>%
  dplyr::ungroup()

head(quests)

sp <- sp(
  data = quests,
  spaes(x = progression_2, y = retention, group = custom_01),
  type = "line"
) %>%
  sp_x_axis(rotation_axis_ticks = 90)

sp
```


